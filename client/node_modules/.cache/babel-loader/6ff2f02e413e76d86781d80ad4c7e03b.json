{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport { persistStore } from 'redux-persist';\nimport logger from 'redux-logger';\nimport createSagaMiddlware from 'redux-saga';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootSaga from '../redux/root-saga';\nimport rootReducer from './root-reducer';\nconst sagaMiddlware = createSagaMiddlware();\nconst middlewares = [sagaMiddlware];\n\nif (process.env.NODE_ENV === 'development') {\n  middlewares.push(logger);\n}\n\nexport const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(...middlewares)));\nsagaMiddlware.run(rootSaga);\nexport const persistor = persistStore(store);","map":{"version":3,"sources":["/home/alex/Projects/My projects/udemy-react-course/ecommerce-app/client/src/redux/store.js"],"names":["createStore","applyMiddleware","persistStore","logger","createSagaMiddlware","composeWithDevTools","rootSaga","rootReducer","sagaMiddlware","middlewares","process","env","NODE_ENV","push","store","run","persistor"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,mBAAP,MAAgC,YAAhC;AACA,SAASC,mBAAT,QAAoC,0BAApC;AAEA,OAAOC,QAAP,MAAqB,oBAArB;AAEA,OAAOC,WAAP,MAAwB,gBAAxB;AAEA,MAAMC,aAAa,GAAGJ,mBAAmB,EAAzC;AAEA,MAAMK,WAAW,GAAG,CAACD,aAAD,CAApB;;AAEA,IAAIE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA4C;AACxCH,EAAAA,WAAW,CAACI,IAAZ,CAAiBV,MAAjB;AACD;;AAEH,OAAO,MAAMW,KAAK,GAAGd,WAAW,CAACO,WAAD,EAAcF,mBAAmB,CAACJ,eAAe,CAAC,GAAGQ,WAAJ,CAAhB,CAAjC,CAAzB;AAEPD,aAAa,CAACO,GAAd,CAAkBT,QAAlB;AAEA,OAAO,MAAMU,SAAS,GAAGd,YAAY,CAACY,KAAD,CAA9B","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\nimport { persistStore } from 'redux-persist';\nimport logger from 'redux-logger';\nimport createSagaMiddlware from 'redux-saga';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport rootSaga from '../redux/root-saga';\n\nimport rootReducer from './root-reducer';\n\nconst sagaMiddlware = createSagaMiddlware();\n\nconst middlewares = [sagaMiddlware];\n\nif (process.env.NODE_ENV === 'development') {\n    middlewares.push(logger);\n  }\n\nexport const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(...middlewares)));\n\nsagaMiddlware.run(rootSaga);\n\nexport const persistor = persistStore(store);\n"]},"metadata":{},"sourceType":"module"}