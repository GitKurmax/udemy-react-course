{"ast":null,"code":"import _objectSpread from \"/home/alex/Projects/My projects/udemy-react-course/ecommerce-app/client/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyAV9uKGin-HJl5oIT13wgSO-ogLnyHtN98\",\n  authDomain: \"udemy-frontend-db.firebaseapp.com\",\n  databaseURL: \"https://udemy-frontend-db.firebaseio.com\",\n  projectId: \"udemy-frontend-db\",\n  storageBucket: \"udemy-frontend-db.appspot.com\",\n  messagingSenderId: \"602299322544\",\n  appId: \"1:602299322544:web:4374042c61a26422a0ab75\",\n  measurementId: \"G-JYG5TCBMLC\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const collectionRef = firestore.collection(`users`);\n  const snapShot = await userRef.get();\n  const collectionShot = await collectionRef.get();\n  console.log(snapShot.data());\n\n  if (!snapShot.exists) {\n    const displayName = userAuth.displayName,\n          email = userAuth.email;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set(_objectSpread({\n        displayName,\n        email,\n        createdAt\n      }, additionalData));\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  console.log(collectionRef);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport default firebase;","map":{"version":3,"sources":["/home/alex/Projects/My projects/udemy-react-course/ecommerce-app/client/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","collectionRef","collection","snapShot","get","collectionShot","console","log","data","exists","displayName","email","createdAt","Date","set","error","message","addCollectionAndDocuments","collectionKey","objectsToAdd","batch","forEach","obj","newDocRef","commit","getCurrentUser","Promise","resolve","reject","unsubscribe","auth","onAuthStateChanged","initializeApp","googleProvider","GoogleAuthProvider","setCustomParameters","prompt"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nconst config = {\n    apiKey: \"AIzaSyAV9uKGin-HJl5oIT13wgSO-ogLnyHtN98\",\n    authDomain: \"udemy-frontend-db.firebaseapp.com\",\n    databaseURL: \"https://udemy-frontend-db.firebaseio.com\",\n    projectId: \"udemy-frontend-db\",\n    storageBucket: \"udemy-frontend-db.appspot.com\",\n    messagingSenderId: \"602299322544\",\n    appId: \"1:602299322544:web:4374042c61a26422a0ab75\",\n    measurementId: \"G-JYG5TCBMLC\"\n}\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n    if (!userAuth) return;\n\n    const userRef = firestore.doc(`users/${userAuth.uid}`);\n    const collectionRef = firestore.collection(`users`);\n      \n    const snapShot = await userRef.get();\n    const collectionShot = await collectionRef.get();\n\n    console.log(snapShot.data())\n\n    if (!snapShot.exists) {\n      const { displayName, email } = userAuth;\n      const createdAt = new Date();\n\n      try {\n        await userRef.set({\n          displayName,\n          email,\n          createdAt,\n          ...additionalData\n        });\n      } catch (error) {\n        console.log('error creating user', error.message);\n      }\n    }\n  \n  return userRef;\n};\n\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey)\n  console.log(collectionRef);\n\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  })\n\n  return await batch.commit()\n}\n\n  export const getCurrentUser = () => {\n    return new Promise((resolve, reject) => {\n      const unsubscribe = auth.onAuthStateChanged(userAuth => {\n        unsubscribe();\n        resolve(userAuth);\n      }, reject);\n    });\n  };\n\nfirebase.initializeApp(config);\n\nexport const auth = firebase.auth();\n\nexport const firestore = firebase.firestore();\n\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\n\ngoogleProvider.setCustomParameters({ prompt: 'select_account' });\n\nexport default firebase;"]},"metadata":{},"sourceType":"module"}